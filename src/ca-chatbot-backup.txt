import { useState, useRef, useEffect } from 'react';
import axios from 'axios';

export default function IRChatbot() {
  const [query, setQuery] = useState('');
  const [chatHistory, setChatHistory] = useState([]);
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!query.trim()) return;

    const currentQuery = query.trim();
    setLoading(true);
    setChatHistory(prev => [...prev, { sender: 'User', text: currentQuery }, { sender: 'Chatbot', text: 'Thinking...' }]);
    setQuery('');

    try {
      const res = await axios.post('http://localhost:8000/query', { query: currentQuery });
      // const res = await axios.post('https://ir-backend-pov2.onrender.com/query', { query: currentQuery });
      const responseObj = res.data.answers || { Default: res.data.answer };

      let botResponse = '';
      for (const [fund, answer] of Object.entries(responseObj)) {
        botResponse += `${fund}:\n${answer.answer || answer}\n`;
        if (answer.source) {
          botResponse += `📄 Source: ${answer.source}\n`;
        }
      }

      setChatHistory(prev => {
        const updated = [...prev];
        updated[updated.length - 1] = { sender: 'Chatbot', text: botResponse.trim() };
        return updated;
      });

    } catch (err) {
      console.error('❌ Axios error:', err);
      setChatHistory(prev => {
        const updated = [...prev];
        updated[updated.length - 1] = { sender: 'Chatbot', text: 'Error fetching response.' };
        return updated;
      });
    } finally {
      setLoading(false);
    }
  };

  const handleDownloadChatLogs = () => {
    window.open('http://localhost:8000/download_chat_logs', '_blank');
    // window.open('https://ir-backend-pov2.onrender.com/download_chat_logs', '_blank');
  };

return (
  <div className="min-h-screen flex items-center justify-center bg-gray-50 p-4">
    <div className="bg-white p-6 rounded-2xl shadow-2xl border w-full max-w-[700px] flex flex-col gap-4">

      {/* Logo */}
      <div className="text-center">
        <img
          src="/CA Logo narrow.png"
          alt="Chicago Atlantic Logo"
          style={{ height: '80px', width: 'auto' }}
          className="mx-auto"
        />
      </div>

      {/* Heading */}
      <h1 className="text-3xl font-bold text-center text-blue-800">
        Chicago Atlantic Chatbot
      </h1>

      {/* Download Chat Logs Button */}
      <div className="flex justify-center">
        <button
          onClick={handleDownloadChatLogs}
          className="bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-lg text-sm"
        >
          Download Chat Logs
        </button>
      </div>

      {/* Input goes at top of chat container */}
      <div className="border rounded-lg bg-gray-100 h-[500px] flex flex-col p-4 space-y-3 overflow-y-auto">

        {/* Input Form */}
        <form onSubmit={handleSubmit} className="flex flex-col gap-2">
          <textarea
            value={query}
            onChange={(e) => setQuery(e.target.value)}
            onKeyDown={(e) => {
              if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                handleSubmit(e);
              }
            }}
            rows={2}
            placeholder="Ask a question..."
            className="w-full border rounded-md p-2 text-sm text-gray-800"
          />
          <button
            type="submit"
            className="bg-blue-600 hover:bg-blue-700 text-white py-2 rounded-md text-sm"
            disabled={loading}
          >
            {loading ? 'Thinking...' : 'Ask'}
          </button>
        </form>

        {/* Chat History */}
        <div className="flex flex-col space-y-2 pt-2">
          {chatHistory.length === 0 ? (
            <p className="text-center text-gray-400 italic">No messages yet</p>
          ) : (
            chatHistory.map((item, index) => (
              <div key={index} className="text-left text-sm whitespace-pre-wrap">
                <span className={item.sender === 'User' ? 'text-blue-700 font-bold' : 'text-green-700 font-bold'}>
                  {item.sender}:
                </span>{' '}
                {item.text}
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  </div>
);

}
